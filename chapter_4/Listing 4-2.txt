using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections;
using System.Drawing;
using System.Workflow.ComponentModel.Compiler;
using System.Workflow.ComponentModel.Serialization;
using System.Workflow.ComponentModel;
using System.Workflow.ComponentModel.Design;
using System.Workflow.Runtime;
using System.Workflow.Activities;
using System.Workflow.Activities.Rules;
using System.Xml.Serialization;
using System.Xml;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Workflow;
using Microsoft.SharePoint.WorkflowActions;
using Microsoft.Office.Workflow.Utility;

namespace MOSSWorkflow
{
  public sealed partial class Workflow1 : SharePointSequentialWorkflowActivity
  {
    public Workflow1()
    {
      InitializeComponent();
    }

    public Guid workflowId = default(System.Guid);
    public Microsoft.SharePoint.Workflow.SPWorkflowActivationProperties workflowProperties = new Microsoft.SharePoint.Workflow.SPWorkflowActivationProperties();
    public SPWorkflowTaskProperties afterProperties = new Microsoft.SharePoint.Workflow.SPWorkflowTaskProperties();
    public SPWorkflowTaskProperties beforeProperties = new Microsoft.SharePoint.Workflow.SPWorkflowTaskProperties();

    private String assignee = default(String);
    private String instructions = default(String);
    private String comments = default(String);

    private void onWorkflowActivated1_Invoked(object sender, ExternalDataEventArgs e)
    {
      workflowId = workflowProperties.WorkflowId;
      XmlSerializer serializer = new XmlSerializer(typeof(InitForm));
      XmlTextReader reader = new XmlTextReader(new System.IO.StringReader(workflowProperties.InitiationData));
      InitForm initform = (InitForm)serializer.Deserialize(reader);
      assignee = initform.assignee;
      instructions = initform.instructions;
      comments = initform.comments;
    }

    public Guid taskID = default(System.Guid);
    public SPWorkflowTaskProperties TaskProperties = new Microsoft.SharePoint.Workflow.SPWorkflowTaskProperties();

    private void onTaskChanged1_Invoked(object sender, ExternalDataEventArgs e)
    {
      isFinished = bool.Parse(afterProperties.ExtendedProperties["isFinished"].ToString());
    }

    private bool isFinished;
    private void notFinished(object sender, ConditionalEventArgs e)
    {
      e.Result = !isFinished;
    }

    private void createTask1_MethodInvoking(object sender, EventArgs e)
    {
      taskID = Guid.NewGuid();
      TaskProperties.Title = "MOSS Workflow Task";
      TaskProperties.AssignedTo = assignee;
      TaskProperties.Description = instructions;
      TaskProperties.ExtendedProperties["comments"] = comments;
      TaskProperties.ExtendedProperties["instructions"] = instructions;
    }
  }
}
